using System;
using System.Runtime.InteropServices;
using CapsLockSharpPrototype.Helper;
using static CapsLockSharpPrototype.Helper.GlobalKeyboardHook;
using static CapsLockSharpPrototype.Helper.KeyDefRuntime;

namespace CapsLockSharpPrototype.Runtime
{
    /* 唉，我这代码写得…… */

    public class Controller
    {
        struct Status
        {
            public bool Replacing;

            public bool PressingCapsLock;
            public bool PressingCapsLockSimulated;
            public bool ReleasingCapsLock;
            public bool ReleasingCapsLockSimulated;

            public bool ReleasingAdditionKey;
            public bool ReleasingAdditionKeySimulated;
            public bool PressingReplacingKeySimulated;


        }
        private Status _status = new Status()
        {
            PressingCapsLock = false,
            PressingReplacingKeySimulated = false,
            PressingCapsLockSimulated = false,
            ReleasingCapsLock = false,
            ReleasingCapsLockSimulated = false,
            ReleasingAdditionKey = false,
            Replacing = false
        };
        // 指示大小写键是否按下。
        public bool CapsLockIsPressed { get; private set; }

        private GlobalKeyboardHook _globalKeyboardHook;
        public void SetupKeyboardHooks()
        {
            _globalKeyboardHook = new GlobalKeyboardHook();
            _globalKeyboardHook.KeyboardEvent += OnKeyStateChanged;
        }

        public bool ProcessKeyReplace(KeyDefRuntime.KeyDef keyDef, GlobalKeyboardHookEventArgs e)
        {
            if (keyDef.Type == KeyDefRuntime.FuncType.Replace)
            {
                // 如果没有按下 CapsLock，并且组合的另一个键不是给定键，就返回 false。
                // 否则进行按键替换
                if (!(CapsLockIsPressed &&
                e.KeyboardState == GlobalKeyboardHook.KeyboardState.KeyDown &&
               e.KeyboardData.VirtualCode == (int)keyDef.AdditionKey)) return false;
                // 模拟释放大小写键，且扫描码为 b，表示必须拦截。
                SendKeyEvent((int)GlobalKeyboardHook.VirtualKey.CapsLock, 0x0b, 2, UIntPtr.Zero);
                // 模拟释放附加键
                SendKeyEvent((int)keyDef.AdditionKey, 0x02, 2, UIntPtr.Zero);
                // 模拟按下替换键
                SendKeyEvent((int)keyDef.ReplacingKey, 0x02, 0, UIntPtr.Zero);
                // 模拟释放替换键
                SendKeyEvent((int)keyDef.ReplacingKey, 0x02, 2, UIntPtr.Zero);
                // 模拟按下大小写键，恢复状态。且扫描码为 b，表示必须拦截。
                SendKeyEvent((int)GlobalKeyboardHook.VirtualKey.CapsLock, 0x0b, 0, UIntPtr.Zero);
                Logger.Info($"[CapsLock] + {keyDef.AdditionKey.ToString()} is replaced by {keyDef.ReplacingKey.ToString()}");
                return true;
            }
            return false;
        }

        private void OnKeyCapsLockChanged(GlobalKeyboardHookEventArgs e)
        {
            if (e.KeyboardState == GlobalKeyboardHook.KeyboardState.KeyDown)
            {
                if (_status.PressingCapsLockSimulated)
                {
                    e.Handled = false;
                    return;
                }
                else
                {
                    _status.PressingCapsLock = true;
                    e.Handled = true;
                    return;
                }
            }
            else if (e.KeyboardState == GlobalKeyboardHook.KeyboardState.KeyUp)
            {
                if(_status.ReleasingCapsLockSimulated)
                {
                    e.Handled = false;
                    return;
                }
                else
                {
                    PressCapsLockSimulated();
                    ReleaseCapsLockSimulated();
                    _status.PressingCapsLock = false;
                    e.Handled = true;
                    return;
                }
            }
        }
        private void PressCapsLockSimulated()
        {
            _status.PressingCapsLockSimulated = true;
            PressKeySimulated(VirtualKey.CapsLock);
            _status.PressingCapsLockSimulated = false;
        }
        private void ReleaseCapsLockSimulated()
        {
            _status.ReleasingCapsLockSimulated = true;
            ReleaseKeySimulated(VirtualKey.CapsLock);
            _status.ReleasingCapsLockSimulated = false;
        }
        private void ReleaseAdditionKeySimulated(VirtualKey virtualKey)
        {
            _status.ReleasingAdditionKeySimulated = true;
            ReleaseKeySimulated(virtualKey);
            _status.ReleasingAdditionKeySimulated = false;
        }
        private void PressKeySimulated(VirtualKey virtualKey)
        {
            SendKeyEvent((int)virtualKey, 0, 0, UIntPtr.Zero);
        }
        private void ReleaseKeySimulated(VirtualKey virtualKey)
        {
            SendKeyEvent((int)virtualKey, 0, 2, UIntPtr.Zero);
        }
        private KeyDef? GetKeyDef(VirtualKey key)
        {
            foreach (var keyDef in KeyDefRuntime.KeyDefs)
            {
                if (keyDef.AdditionKey == key) return keyDef;
            }
            return null;
        }
        private void OnKeyExceptCapsLockChanged(GlobalKeyboardHookEventArgs e)
        {
            var currentKey = (VirtualKey)e.KeyboardData.VirtualCode;
            var keyDef = GetKeyDef(currentKey);
            if (keyDef == null)
            {
                e.Handled = false;
                return;
            }
            OnAdditionKeyStateChanged((KeyDef)keyDef,e);
        }

        private void OnAdditionKeyStateChanged(KeyDef keyDef, GlobalKeyboardHookEventArgs e)
        {
            if (e.KeyboardState==KeyboardState.KeyUp)
            {
                e.Handled = false;
                return;
            }
            if(_status.PressingCapsLock)
            {
                _status.Replacing = true;
                ReleaseCapsLockSimulated();
                ReleaseAdditionKeySimulated(keyDef.AdditionKey);
                PressReplacingKeySimulated(keyDef.ReplacingKey);
                _status.Replacing = false;
                e.Handled = true;
                return;
            }
            e.Handled = false;
            return;
        }

        private void PressReplacingKeySimulated(VirtualKey replacingKey)
        {
            _status.PressingReplacingKeySimulated = true;
            PressKeySimulated(replacingKey);
            _status.PressingReplacingKeySimulated = false;
        }

        bool _replaced;
        // 可能输入的键：
        // CA UP
        // CA DOWN
        // CA UP 内部扫描码
        // CA DOWN 内部扫描码
        // 其他
        private void OnKeyStateChanged(object sender, GlobalKeyboardHookEventArgs e)
        {
            var currentKey = (VirtualKey)e.KeyboardData.VirtualCode;
            if (currentKey == VirtualKey.CapsLock)
            {
                OnKeyCapsLockChanged(e);
            }
            else
            {
                OnKeyExceptCapsLockChanged(e);
            }
            return;

            //Logger.Info("按键：" + ((GlobalKeyboardHook.VirtualKeys)e.KeyboardData.VirtualCode)
            //    + (e.KeyboardState == GlobalKeyboardHook.KeyboardState.KeyDown ? "按下" : "抬起")
            //    );
            //// 如果当前按键是 CapsLock，扫描码为内部通信的 0x0a，直接放行。
            //if (e.KeyboardData.VirtualCode == (int)GlobalKeyboardHook.VirtualKeys.CapsLock && e.KeyboardData.HardwareScanCode == 0x0a)
            //{
            //    TrayIcon.RefleshIcon(MainForm.NotifyIcon);
            //    Logger.Info("放行.");
            //    return;
            //}
            //// 1. 如果当前按键是 CapsLock，那么就更新 CapsLock 状态。
            //if (e.KeyboardData.VirtualCode == (int)GlobalKeyboardHook.VirtualKeys.CapsLock)
            //{
            //    CapsLockIsPressed = e.KeyboardState == GlobalKeyboardHook.KeyboardState.KeyDown;
            //    if (e.KeyboardState == GlobalKeyboardHook.KeyboardState.KeyDown)
            //    {
            //        e.Handled = true;
            //        _replaced = false;
            //        Logger.Info("拦截了 CapsLock 的按下.");
            //        return;
            //    }
            //}
            //// 2. 如果 CapsLock 早已按下，并且当前按键不是 CapsLock，那么就执行键定义
            ////指示是否有按键被替换
            //if (CapsLockIsPressed && e.KeyboardData.VirtualCode != (int)GlobalKeyboardHook.VirtualKeys.CapsLock)
            //{
            //    foreach (var item in KeyDefRuntime.KeyDefs)
            //    {
            //        if (ProcessKeyReplace(item, e))
            //        {
            //            _replaced = true;
            //            Logger.Info("完成替换：" + _replaced + "\n");
            //            break;
            //        }
            //    }
            //    // 如果按键被替换，那么当前键的作用失灵。
            //    e.Handled = _replaced;
            //    if (!_replaced) Logger.Info("没有进行任何替换");
            //    return;
            //}
            //Logger.Info("替换状态：" + _replaced);
            //if (!_replaced && e.KeyboardData.VirtualCode == (int)GlobalKeyboardHook.VirtualKeys.CapsLock &&
            //    e.KeyboardState == GlobalKeyboardHook.KeyboardState.KeyUp)
            //{
            //    if (e.KeyboardData.HardwareScanCode == 0x0b)
            //    {
            //        Logger.Info("拦截了 0x0b.");
            //        e.Handled = true;
            //        return;
            //    }
            //    Logger.Info("发送了虚拟大小写键.");
            //    SendKeyEvent((int)GlobalKeyboardHook.VirtualKeys.CapsLock, 0x0a, 0, UIntPtr.Zero);
            //    SendKeyEvent((int)GlobalKeyboardHook.VirtualKeys.CapsLock, 0x0a, 2, UIntPtr.Zero);

            //    e.Handled = true;
            //    return;
            //}
            //_replaced = false;
            //Logger.Info("函数结束。" + _replaced);
            //e.Handled = false;
        }

        public void Dispose()
        {
            _globalKeyboardHook?.Dispose();
        }

        // cf: https://codeday.me/bug/20180926/270917.html
        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void SendKeyEvent(int bVk, byte bScan, uint dwFlags, UIntPtr dwExtraInfo);


    }
}
